/**
 *  Copyright (C) 2015  Albert Zedlitz
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/* Variable declaration generated by agent:
 * var g_eezz_socket_addr = "ws://{}:{}".format(host, port);
 * var g_eezz_arguments   = "";
 */  
var g_eezz_web_socket;
window.onload = eezz_connect();

// Open and controlling the WEB socket
function eezz_connect() {
	g_eezz_web_socket        = new WebSocket(g_eezz_socket_addr);
    g_eezz_web_socket.onopen = function() {
        window.console.log("open web socket ...");
        var x_body    = document.body;
        var x_json    = {"initialize": x_body.innerHTML, "args": g_eezz_arguments};
        g_eezz_web_socket.send(JSON.stringify(x_json));
    }
    
    /* Error handling: Reopen connection */
    g_eezz_web_socket.onerror = function(a_error) {
        window.console.error(a_error);
    }

    /* Wait for the application and update the document          */
    g_eezz_web_socket.onmessage = function(a_event) {
        var x_json = JSON.parse(a_event.data)

        if (x_json.update) {
            for (var y in x_json[x]) {            // loop at array of elements
                var x_id    = x_json[x][y]['id'];
                var x_html  = x_json[x][y]['html'];
                var x_attrs = x_json[x][y]['attrs'];
                var x_elem  = document.getElementById(x_id)

                if (x_elem)  {
                    dynamic_update(x_elem, x_html, x_attrs);
        }   }   }
    }
}

// Dynamic update: The inner-HTML of the element is calculated by the server
// The result is send via WEB socket as json = {tag-name: html, ...}
function dynamic_update(a_element, a_json, a_attrs) {
    for (var x in a_json) {
        x_structure = a_element.getElementByTagName(x);
        x_structure.innerHTML = a_json[x];
    }

    // find parent activities
    var x_json = a_element.getAttribute('data-eezz-json');
    if (x_json && x_json.update) {
        var x_update     = x_json['update'];
        var x_attributes = JSON.parse( a_attrs );
        // find element to update using attributes: name.[style.]attribute = value
        // update: { element-with-name.value : current_row }
        // attrs : { current_row: 100 }
        var x_elem   = document.querySelector('[data-eezz-name={name}]');
        // x_elem[attribute] = value
    }
}

function easyClick(aEvent, aElement) {
    var x_post = false;
    var x_json = {};

    // get the table/selection parent ID
    // eval the json for call parameter
    // action collapse would not generate a post
    if (x_post) {
        var x_response = JSON.stringify(x_json);
        g_eezz_web_socket.send(x_response);
    }
}
